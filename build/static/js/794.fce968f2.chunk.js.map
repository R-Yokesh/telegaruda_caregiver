{"version":3,"file":"static/js/794.fce968f2.chunk.js","mappings":"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","sources":["Components/PatientDetailCard/PatientDetailCard.jsx","Components/SummaryTable/SummaryTable.jsx","Components/SummaryTable/TableRow.jsx","Components/SummaryTable/ExamCard.jsx","Components/SummaryTable/TableColor.jsx","Components/SummaryTable/TableSec.jsx","Components/SummaryTable/DocumentTable.jsx","Components/SummaryTable/Prescription.jsx","../node_modules/@coreui/react/src/components/tabs/CTabs.tsx","../node_modules/@coreui/react/src/components/tabs/CTabList.tsx","../node_modules/@coreui/react/src/utils/getNextActiveElement.ts","../node_modules/@coreui/react/src/components/tabs/CTab.tsx","../node_modules/@coreui/react/src/components/tabs/CTabContent.tsx","../node_modules/@coreui/react/src/utils/getTransitionDurationFromElement.ts","../node_modules/@coreui/react/src/components/tabs/CTabPanel.tsx","Views/PatientSummary/PatientSummaryView.jsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/table/CTableFoot.tsx","../node_modules/@coreui/react/src/components/table/CTableCaption.tsx","../node_modules/@coreui/react/src/components/table/CTableResponsiveWrapper.tsx","../node_modules/@coreui/react/src/components/table/utils.ts","../node_modules/@coreui/react/src/components/table/CTable.tsx","../node_modules/@coreui/react/src/components/table/CTableBody.tsx","../node_modules/@coreui/react/src/components/table/CTableDataCell.tsx","../node_modules/@coreui/react/src/components/table/CTableHead.tsx","../node_modules/@coreui/react/src/components/table/CTableHeaderCell.tsx","../node_modules/@coreui/react/src/components/table/CTableRow.tsx","../node_modules/@coreui/react/src/props.ts"],"sourcesContent":["import React from 'react'\r\nimport { CRow, CCol } from '@coreui/react'\r\n\r\nfunction PatientDetailCard() {\r\n    return (\r\n        <div className='patient-card-details'>\r\n            <CRow>\r\n                <CCol sm={12} lg={6}>\r\n                    <div className='blue-card patient-box'>\r\n                        <h5>Patient Details</h5>\r\n                        <CRow>\r\n                            <CCol sm={6}>\r\n                                <span>Patient Name: Ram Mohan S R</span>\r\n                            </CCol>\r\n                            <CCol sm={6}>\r\n                                <span>Date Of Birth & Age: 04-02-1997 & 27 Years</span>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow>\r\n                            <CCol sm={6}>\r\n                                <span>Gender: Male</span>\r\n                            </CCol>\r\n                            <CCol sm={6}>\r\n                                <span>Blood Group: O+</span>\r\n                            </CCol>\r\n                        </CRow>\r\n                    </div>\r\n                </CCol>\r\n                <CCol sm={12} lg={6}>\r\n                    <div className='black-card patient-box'>\r\n                        <h5>Consult Details</h5>\r\n                        <CRow>\r\n                            <CCol sm={6}>\r\n                                <span>Scheduled at: 21-06-2024 12:34 PM</span>\r\n                            </CCol>\r\n                            <CCol sm={6}>\r\n                                <span>Started at:</span>\r\n                            </CCol>\r\n                        </CRow>\r\n                        <CRow>\r\n                            <CCol sm={6}>\r\n                                <span>Ended at:</span>\r\n                            </CCol>\r\n                            <CCol sm={6}>\r\n                                <span>Additional Notes:</span>\r\n                            </CCol>\r\n                        </CRow>\r\n                    </div>\r\n                </CCol>\r\n            </CRow>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PatientDetailCard\r\n","import React from 'react'\r\nimport { CTable, CTableHead, CTableHeaderCell, CTableBody, CTableRow, CTableDataCell } from '@coreui/react'\r\n\r\nfunction SummaryTable({ columns, items, green, head }) {\r\n\r\n    return (\r\n        <div className={`table-sec ${green}`} >\r\n            <h4>{head}</h4>\r\n            <CTable columns={columns} items={items} tableHeadProps={{ color: 'dark' }} />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SummaryTable\r\n","import { CRow, CCol } from '@coreui/react'\r\nimport React from 'react'\r\n\r\nfunction TableRow({ PrescritionData }) {\r\n    return (\r\n        <div className='percription-id'>\r\n            <div className='flex-sec justify-content-between table-sec-headings'>\r\n                <p><b>Prescription Id: {PrescritionData.id}</b></p>\r\n                <p><b>{PrescritionData.eyesight}</b></p>\r\n                <p><b>Date: {PrescritionData.date}</b></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableRow\r\n","import React from 'react'\r\n\r\nfunction ExamCard({ ExaminationaData }) {\r\n    return (\r\n        <div className='page-card'>\r\n            {ExaminationaData.map((item) => (\r\n                <div className='card-data-type'>\r\n                    <h5>{item.type}</h5>\r\n                    <div className='flex-sec multi-card'>\r\n                        {item.datas.map((content) => (\r\n                            <p>{content.valueOne}</p>\r\n                        ))}\r\n                    </div>\r\n\r\n                </div>\r\n            ))\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExamCard\r\n","import React from 'react'\r\nimport { CTable, CTableHead, CTableRow, CTableHeaderCell, CTableBody, CTableDataCell } from '@coreui/react'\r\n\r\nfunction TableColor({ columns, items, head, green }) {\r\n    return (\r\n        <div className='table-sec'>\r\n            <h4>{head}</h4>\r\n            <CTable>\r\n                <CTableHead>\r\n\r\n                    <CTableRow color=\"dark\">\r\n                        {columns.map((items) => (\r\n                            <CTableHeaderCell scope=\"col\">{items.key}</CTableHeaderCell>\r\n                        ))}\r\n                    </CTableRow>\r\n\r\n                </CTableHead>\r\n                <CTableBody>\r\n                    {/* {items.map((data) => (\r\n                        <CTableRow>\r\n                            <CTableHeaderCell scope=\"row\">{data.No}</CTableHeaderCell>\r\n                            <CTableDataCell> <span className='green'>{data.Result}</span></CTableDataCell>\r\n                            <CTableDataCell>{data.BMI}</CTableDataCell>\r\n                            <CTableDataCell>{data.Height}</CTableDataCell>\r\n                            <CTableDataCell>{data.Weight}</CTableDataCell>\r\n                            <CTableDataCell>{data.Date}</CTableDataCell>\r\n                        </CTableRow>\r\n                    ))} */}\r\n                    {items.map((item, index) => (\r\n                        <CTableRow key={index}>\r\n                            {columns.map((col, colIndex) => (\r\n                                colIndex === 1 && green ? (\r\n                                    <CTableDataCell key={col.key}>\r\n                                        <span className='green'>{item[col.key]}</span>\r\n                                    </CTableDataCell>\r\n                                ) : (\r\n                                    <CTableDataCell key={col.key}>{item[col.key]}</CTableDataCell>\r\n                                )\r\n                            ))}\r\n                        </CTableRow>\r\n                    ))}\r\n                </CTableBody>\r\n            </CTable>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableColor\r\n","import React from 'react'\r\n\r\nfunction TableSec({ PrescritionData }) {\r\n    return (\r\n        <div className='percription-id'>\r\n            <div className='flex-sec justify-content-between table-sec-headings'>\r\n                <p><b>Prescription Id: {PrescritionData.id}</b></p>\r\n                {/* <p><b>{PrescritionData.eyesight}</b></p> */}\r\n                <p><b>Date: {PrescritionData.date}</b></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableSec\r\n","import React from 'react'\r\nimport { CTable, CTableRow, CTableHeaderCell, CTableDataCell, CTableHead, CTableBody } from '@coreui/react'\r\n\r\nfunction DocumentTable({ columns, items, head }) {\r\n    return (\r\n        <div className='table-sec'>\r\n            <h4>{head}</h4>\r\n            <CTable>\r\n                <CTableHead>\r\n                    <CTableRow color=\"dark\">\r\n                        {columns.map((item) => (\r\n                            <CTableHeaderCell scope=\"col\">{item.label}</CTableHeaderCell>\r\n                        ))}\r\n                    </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                    {items.map((data) => (\r\n                        <CTableRow>\r\n                            <CTableHeaderCell scope=\"row\">{data.No}</CTableHeaderCell>\r\n                            <CTableDataCell>{data.Date}</CTableDataCell>\r\n                            <CTableDataCell>{data.LabTest}</CTableDataCell>\r\n                            <CTableDataCell>{data.Notes}</CTableDataCell>\r\n                            <CTableDataCell><a href={data.Link} className='table-link' target=\"_blank\" rel=\"noopener noreferrer\">{data.Link}</a></CTableDataCell>\r\n                        </CTableRow>\r\n                    ))}\r\n                </CTableBody>\r\n            </CTable>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DocumentTable\r\n","import React from 'react'\r\nimport { CTable, CTableRow, CTableHeaderCell, CTableDataCell, CTableHead, CTableBody } from '@coreui/react'\r\n\r\nfunction Prescription({ columns, items, head }) {\r\n    return (\r\n        <div className='table-sec'>\r\n            <CTable>\r\n                <CTableHead>\r\n                    <CTableRow color=\"dark\">\r\n                        {columns.map((item) => (\r\n                            item.label == \"Frequency\" ?\r\n                                (\r\n                                    <CTableHeaderCell scope=\"col\">{item.label} <br />M | A | E | N</CTableHeaderCell>\r\n                                ) :\r\n                                (\r\n                                    <CTableHeaderCell scope=\"col\">{item.label}</CTableHeaderCell>\r\n                                )\r\n                        ))}\r\n                    </CTableRow>\r\n                </CTableHead>\r\n                <CTableBody>\r\n                    {items.map((data) => (\r\n                        <CTableRow>\r\n                            <CTableHeaderCell scope=\"row\">{data.RX}</CTableHeaderCell>\r\n                            <CTableDataCell>{data.Frequency} <br />{data.food}</CTableDataCell>\r\n                            <CTableDataCell>{data.Duration}</CTableDataCell>\r\n                            <CTableDataCell>{data.Qty}</CTableDataCell>\r\n                        </CTableRow>\r\n                    ))}\r\n                </CTableBody>\r\n            </CTable>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Prescription\r\n","import React, { createContext, forwardRef, HTMLAttributes, useEffect, useId, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CTabsProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  /**\n   * The active item key.\n   */\n  activeItemKey: number | string\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The callback is fired when the active tab changes.\n   */\n  onChange?: (value: number | string) => void\n}\n\nexport interface TabsContextProps {\n  _activeItemKey?: number | string\n  setActiveItemKey: React.Dispatch<React.SetStateAction<number | string | undefined>>\n  id?: string\n}\n\nexport const TabsContext = createContext({} as TabsContextProps)\n\nexport const CTabs = forwardRef<HTMLDivElement, CTabsProps>(\n  ({ children, activeItemKey, className, onChange }, ref) => {\n    const id = useId()\n    const [_activeItemKey, setActiveItemKey] = useState(activeItemKey)\n\n    useEffect(() => {\n      _activeItemKey && onChange && onChange(_activeItemKey)\n    }, [_activeItemKey])\n\n    return (\n      <TabsContext.Provider value={{ _activeItemKey, setActiveItemKey, id }}>\n        <div className={classNames('tabs', className)} ref={ref}>\n          {children}\n        </div>\n      </TabsContext.Provider>\n    )\n  },\n)\n\nCTabs.propTypes = {\n  activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nCTabs.displayName = 'CTabs'\n","import React, { forwardRef, HTMLAttributes, KeyboardEvent, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { getNextActiveElement } from '../../utils'\n\nexport interface CTabListProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Specify a layout type for component.\n   */\n  layout?: 'fill' | 'justified'\n  /**\n   * Set the nav variant to tabs or pills.\n   */\n  variant?: 'pills' | 'tabs' | 'underline' | 'underline-border'\n}\n\nexport const CTabList = forwardRef<HTMLDivElement, CTabListProps>(\n  ({ children, className, layout, variant, ...rest }, ref) => {\n    const tabListRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, tabListRef)\n\n    const handleKeydown = (event: KeyboardEvent<HTMLDivElement>) => {\n      if (\n        tabListRef.current !== null &&\n        (event.key === 'ArrowDown' ||\n          event.key === 'ArrowUp' ||\n          event.key === 'ArrowLeft' ||\n          event.key === 'ArrowRight' ||\n          event.key === 'Home' ||\n          event.key === 'End')\n      ) {\n        event.preventDefault()\n        const target = event.target as HTMLElement\n        // eslint-disable-next-line unicorn/prefer-spread\n        const items: HTMLElement[] = Array.from(\n          tabListRef.current.querySelectorAll('.nav-link:not(.disabled):not(:disabled)'),\n        )\n\n        let nextActiveElement\n\n        if (event.key === 'Home' || event.key === 'End') {\n          nextActiveElement = event.key === 'End' ? items.at(-1) : items[0]\n        } else {\n          nextActiveElement = getNextActiveElement(\n            items,\n            target,\n            event.key === 'ArrowDown' || event.key === 'ArrowRight',\n            true,\n          )\n        }\n\n        if (nextActiveElement) {\n          nextActiveElement.focus({ preventScroll: true })\n        }\n      }\n    }\n\n    return (\n      <div\n        className={classNames(\n          'nav',\n          {\n            [`nav-${layout}`]: layout,\n            [`nav-${variant}`]: variant,\n          },\n          className,\n        )}\n        role=\"tablist\"\n        onKeyDown={handleKeydown}\n        ref={forkedRef}\n        {...rest}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nCTabList.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  layout: PropTypes.oneOf(['fill', 'justified']),\n  variant: PropTypes.oneOf(['pills', 'tabs', 'underline', 'underline-border']),\n}\n\nCTabList.displayName = 'CTabList'\n","const getNextActiveElement = (\n  list: HTMLElement[],\n  activeElement: HTMLElement,\n  shouldGetNext: boolean,\n  isCycleAllowed: boolean,\n) => {\n  const listLength = list.length\n  let index = list.indexOf(activeElement)\n\n  if (index === -1) {\n    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0]\n  }\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport default getNextActiveElement\n","import React, { forwardRef, HTMLAttributes, useContext } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { TabsContext } from './CTabs'\n\nexport interface CTabProps extends HTMLAttributes<HTMLButtonElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n}\n\nexport const CTab = forwardRef<HTMLButtonElement, CTabProps>(\n  ({ children, className, itemKey, ...rest }, ref) => {\n    const { _activeItemKey, setActiveItemKey, id } = useContext(TabsContext)\n\n    const isActive = () => itemKey === _activeItemKey\n\n    return (\n      <button\n        className={classNames(\n          'nav-link',\n          {\n            active: isActive(),\n          },\n          className,\n        )}\n        id={`${id}${itemKey}-tab`}\n        onClick={() => setActiveItemKey(itemKey)}\n        onFocus={() => setActiveItemKey(itemKey)}\n        role=\"tab\"\n        tabIndex={isActive() ? 0 : -1}\n        type=\"button\"\n        aria-controls={`${id}${itemKey}-tab-pane`}\n        aria-selected={isActive()}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </button>\n    )\n  },\n)\n\nCTab.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n}\n\nCTab.displayName = 'CTab'\n","import React, { HTMLAttributes, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CTabContentProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n}\n\nexport const CTabContent = forwardRef<HTMLDivElement, CTabContentProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <div className={classNames('tab-content', className)} {...rest} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nCTabContent.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCTabContent.displayName = 'CTabContent'\n","const getTransitionDurationFromElement = (element: HTMLElement) => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * 1000\n}\n\nexport default getTransitionDurationFromElement\n","import React, { HTMLAttributes, forwardRef, useContext, useEffect, useRef, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Transition } from 'react-transition-group'\n\nimport { TabsContext } from './CTabs'\nimport { useForkedRef } from '../../hooks'\nimport { getTransitionDurationFromElement } from '../../utils'\n\nexport interface CTabPanelProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Item key.\n   */\n  itemKey: number | string\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * Enable fade in and fade out transition.\n   */\n  transition?: boolean\n  /**\n   * Toggle the visibility of component.\n   */\n  visible?: boolean\n}\n\nexport const CTabPanel = forwardRef<HTMLDivElement, CTabPanelProps>(\n  ({ children, className, itemKey, onHide, onShow, transition = true, visible, ...rest }, ref) => {\n    const { _activeItemKey, id } = useContext(TabsContext)\n\n    const tabPaneRef = useRef()\n    const forkedRef = useForkedRef(ref, tabPaneRef)\n\n    const [_visible, setVisible] = useState(visible || _activeItemKey === itemKey)\n\n    useEffect(() => {\n      visible !== undefined && setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      setVisible(_activeItemKey === itemKey)\n    }, [_activeItemKey])\n\n    return (\n      <Transition\n        in={_visible}\n        nodeRef={tabPaneRef}\n        onEnter={onShow}\n        onExit={onHide}\n        timeout={tabPaneRef.current ? getTransitionDurationFromElement(tabPaneRef.current) : 0}\n      >\n        {(state) => (\n          <div\n            className={classNames(\n              'tab-pane',\n              {\n                active: _visible,\n                fade: transition,\n                show: state === 'entered',\n              },\n              className,\n            )}\n            id={`${id}${itemKey}-tab-pane`}\n            role=\"tabpanel\"\n            aria-labelledby={`${id}${itemKey}-tab`}\n            tabIndex={0}\n            ref={forkedRef}\n            {...rest}\n          >\n            {children}\n          </div>\n        )}\n      </Transition>\n    )\n  },\n)\n\nCTabPanel.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  transition: PropTypes.bool,\n  visible: PropTypes.bool,\n}\n\nCTabPanel.displayName = 'CTabPanel'\n","import React, { useState } from 'react'\r\nimport PatientDetailCard from '../../Components/PatientDetailCard/PatientDetailCard'\r\nimport SummaryTable from '../../Components/SummaryTable/SummaryTable'\r\nimport TableRow from '../../Components/SummaryTable/TableRow'\r\nimport ExamCard from '../../Components/SummaryTable/ExamCard'\r\nimport TableColor from '../../Components/SummaryTable/TableColor'\r\nimport TableSec from '../../Components/SummaryTable/TableSec'\r\nimport DocumentTable from '../../Components/SummaryTable/DocumentTable'\r\nimport Prescription from '../../Components/SummaryTable/Prescription'\r\nimport { CTabs, CTab, CTabList, CTabContent, CTabPanel } from '@coreui/react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction PatientSummaryView() {\r\n\r\n    const [ActiveKey, setActiveKey] = useState('Vitals')\r\n    // BMI Data\r\n    const VitalsColumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'Result',\r\n            label: 'Result'\r\n        },\r\n        {\r\n            key: 'BMI',\r\n            label: 'BMI',\r\n        },\r\n        {\r\n            key: 'Height',\r\n            label: 'Height',\r\n        },\r\n        {\r\n            key: 'Weight',\r\n            label: 'Weight',\r\n        },\r\n        {\r\n            key: 'Date',\r\n            label: 'Date',\r\n        },\r\n    ]\r\n\r\n    const VitalsItems = [\r\n        {\r\n            No: 1,\r\n            Result: 'Normal Weight',\r\n            BMI: '24.13',\r\n            Height: '160 CM',\r\n            Weight: '60 KG',\r\n            Date: '02-04-2024'\r\n        },\r\n        {\r\n            No: 2,\r\n            Result: 'Normal Weight',\r\n            BMI: '24.13',\r\n            Height: '160 CM',\r\n            Weight: '60 KG',\r\n            Date: '02-04-2024',\r\n            _cellProps: { class: { scope: 'hey' } }\r\n        },\r\n    ]\r\n\r\n    // Temparature Data\r\n    const TemColumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'Result',\r\n            label: 'Result'\r\n        },\r\n        {\r\n            key: 'Temperature',\r\n            label: 'Temperature',\r\n        },\r\n        {\r\n            key: 'Type',\r\n            label: 'Type',\r\n        },\r\n        {\r\n            key: 'Date',\r\n            label: 'Date',\r\n        },\r\n    ]\r\n\r\n    const TemItems = [\r\n        {\r\n            No: 1,\r\n            Result: 'Normal',\r\n            Temperature: '99.88 °F, 36.8 °C',\r\n            Type: 'Oral',\r\n            Date: '02-04-2024   15:45'\r\n        },\r\n        {\r\n            No: 2,\r\n            Result: 'Normal',\r\n            Temperature: '99.88 °F, 36.8 °C',\r\n            Type: 'Oral',\r\n            Date: '02-04-2024   15:45'\r\n        },\r\n    ]\r\n\r\n    // Glassess Data\r\n    const GlassColumns = [\r\n        {\r\n            key: 'RX',\r\n            label: 'RX',\r\n        },\r\n        {\r\n            key: 'SPH',\r\n            label: 'SPH'\r\n        },\r\n        {\r\n            key: 'CYL',\r\n            label: 'CYL',\r\n        },\r\n        {\r\n            key: 'Axis',\r\n            label: 'Axis',\r\n        },\r\n    ]\r\n\r\n    const GlassItems = [\r\n        {\r\n            RX: 'D.V',\r\n            SPH: '2',\r\n            CYL: '2',\r\n            Axis: '50 °',\r\n        },\r\n        {\r\n            RX: 'D.V',\r\n            SPH: '2',\r\n            CYL: '2',\r\n            Axis: '50 °',\r\n        },\r\n    ]\r\n\r\n    const PrescritionData = {\r\n        id: '488',\r\n        eyesight: 'Right Eye (R.E)',\r\n        date: '02-04-2024 15:45'\r\n    }\r\n\r\n    const PrescritionDataTwo = {\r\n        id: '489',\r\n        eyesight: 'Left Eye (L.E)',\r\n        date: '02-04-2024 15:45'\r\n    }\r\n\r\n    // Histories Data\r\n    // Glassess Data\r\n    const HistoryColumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'Condition',\r\n            label: 'Condition'\r\n        },\r\n        {\r\n            key: 'OnsetDate',\r\n            label: 'Onset Date',\r\n        },\r\n        {\r\n            key: 'RecoveredDate',\r\n            label: 'RecoveredDate',\r\n        },\r\n        {\r\n            key: 'TreatedBy',\r\n            label: 'Treated By',\r\n        },\r\n        {\r\n            key: 'Treatment',\r\n            label: 'Treatment',\r\n        },\r\n        {\r\n            key: 'Remark',\r\n            label: 'Remark',\r\n        },\r\n        {\r\n            key: 'Status',\r\n            label: 'Status',\r\n        },\r\n    ]\r\n\r\n    const HistoryItems = [\r\n        {\r\n            No: '1',\r\n            Condition: 'Fever',\r\n            OnsetDate: '02-04-2024',\r\n            RecoveredDate: '02-04-2024',\r\n            TreatedBy: 'Prathi',\r\n            Treatment: 'Buddy Splint',\r\n            Remark: '-',\r\n            Status: 'Inactive',\r\n        },\r\n        {\r\n            No: '2',\r\n            Condition: 'Fever',\r\n            OnsetDate: '02-04-2024',\r\n            RecoveredDate: '02-04-2024',\r\n            TreatedBy: 'Prathi',\r\n            Treatment: 'Buddy Splint',\r\n            Remark: '-',\r\n            Status: 'active',\r\n        },\r\n    ]\r\n\r\n    // History Screens\r\n    const Cheifcolumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'Complaints',\r\n            label: 'Complaints'\r\n        },\r\n        {\r\n            key: 'Notes',\r\n            label: 'Notes',\r\n        },\r\n    ]\r\n\r\n    const Cheifitems = [\r\n        {\r\n            No: 1,\r\n            Complaints: 'abdominal pain, radiating to right shoulder and shoulder blades',\r\n            Notes: 'Taking dole',\r\n        },\r\n        {\r\n            No: 2,\r\n            Complaints: 'abdominal pain, radiating to right shoulder and shoulder blades',\r\n            Notes: 'Taking dole',\r\n        },\r\n    ]\r\n\r\n    // Medicine Data \r\n    const Medicinecolumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'MEDICINE',\r\n            label: 'MEDICINE'\r\n        },\r\n        {\r\n            key: 'Type',\r\n            label: 'Type',\r\n        },\r\n        {\r\n            key: 'STRENGTH',\r\n            label: 'STRENGTH',\r\n        },\r\n        {\r\n            key: 'INTAKEDAYS',\r\n            label: 'INTAKE DAYS',\r\n        },\r\n        {\r\n            key: 'QUANTITY',\r\n            label: 'QUANTITY',\r\n        },\r\n        {\r\n            key: 'SIGINFO',\r\n            label: 'SIG INFO',\r\n        },\r\n        {\r\n            key: 'START',\r\n            label: 'START',\r\n        },\r\n        {\r\n            key: 'END',\r\n            label: 'END',\r\n        },\r\n        {\r\n            key: 'Reason',\r\n            label: 'Reason',\r\n        },\r\n        {\r\n            key: 'Status',\r\n            label: 'Status',\r\n        },\r\n    ]\r\n\r\n    const Medicineitems = [\r\n        {\r\n            No: 1,\r\n            MEDICINE: 'Dolox',\r\n            Type: 'Brand',\r\n            STRENGTH: 'Milligram(mg)',\r\n            INTAKEDAYS: '6',\r\n            QUANTITY: '6',\r\n            SIGINFO: 'before breakfast',\r\n            START: '22-01-2024',\r\n            END: '22-01-2024',\r\n            Reason: '-',\r\n            Status: 'Active',\r\n        },\r\n        {\r\n            No: 2,\r\n            MEDICINE: 'Dolox',\r\n            Type: 'Brand',\r\n            STRENGTH: 'Milligram(mg)',\r\n            INTAKEDAYS: '6',\r\n            QUANTITY: '6',\r\n            SIGINFO: 'before breakfast',\r\n            START: '22-01-2024',\r\n            END: '22-01-2024',\r\n            Reason: '-',\r\n            Status: 'Active',\r\n        },\r\n    ]\r\n\r\n    // HPI Data\r\n    const HPIcolumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'Onset',\r\n            label: 'Onset'\r\n        },\r\n        {\r\n            key: 'Location',\r\n            label: 'Location',\r\n        },\r\n        {\r\n            key: 'Duration',\r\n            label: 'Duration in Days',\r\n        },\r\n        {\r\n            key: 'Characteristics',\r\n            label: 'Characteristics (SL)',\r\n        },\r\n        {\r\n            key: 'aggravating',\r\n            label: 'aggravating factors',\r\n        },\r\n        {\r\n            key: 'Relieving',\r\n            label: 'Relieving factors',\r\n        },\r\n        {\r\n            key: 'Temporal',\r\n            label: 'Temporal factors',\r\n        },\r\n        {\r\n            key: 'Severity',\r\n            label: 'Severity',\r\n        },\r\n        {\r\n            key: 'Notes',\r\n            label: 'Notes',\r\n        },\r\n    ]\r\n\r\n    const HPIitems = [\r\n        {\r\n            No: 1,\r\n            Onset: '02-04-2024',\r\n            Location: 'Knee',\r\n            Duration: '20',\r\n            Characteristics: 'Fracture',\r\n            aggravating: 'Fracture',\r\n            Relieving: 'Fracture',\r\n            Temporal: 'Fracture',\r\n            Severity: 'Normal',\r\n            Notes: '-',\r\n        },\r\n        {\r\n            No: 2,\r\n            Onset: '02-04-2024',\r\n            Location: 'Knee',\r\n            Duration: '20',\r\n            Characteristics: 'Fracture',\r\n            aggravating: 'Fracture',\r\n            Relieving: 'Fracture',\r\n            Temporal: 'Fracture',\r\n            Severity: 'Normal',\r\n            Notes: '-',\r\n        },\r\n    ]\r\n\r\n    // HPI Data\r\n    const Surgicalcolumns = [\r\n        {\r\n            key: 'No',\r\n            label: 'No.',\r\n        },\r\n        {\r\n            key: 'DATE',\r\n            label: 'DATE'\r\n        },\r\n        {\r\n            key: 'Procedure',\r\n            label: 'Procedure',\r\n        },\r\n        {\r\n            key: 'Notes',\r\n            label: 'Notes',\r\n        }\r\n    ]\r\n\r\n    const Surgicalitems = [\r\n        {\r\n            No: 1,\r\n            DATE: '02-04-2024',\r\n            Procedure: 'Demo',\r\n            Notes: 'Art',\r\n        },\r\n        {\r\n            No: 2,\r\n            DATE: '02-04-2024',\r\n            Procedure: 'Demo',\r\n            Notes: 'Art',\r\n        },\r\n    ]\r\n\r\n    const ExaminationaData = [\r\n        {\r\n            type: 'Nutritional',\r\n            datas: [\r\n                {\r\n                    valueOne: 'Lorem Ipsum',\r\n                },\r\n                {\r\n                    valueOne: 'Lorem Ipsum',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: 'Constitutional',\r\n            datas: [\r\n                {\r\n                    valueOne: 'Lorem Ipsum',\r\n                },\r\n                {\r\n                    valueOne: 'Lorem Ipsum',\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            type: 'HEENT',\r\n            datas: [\r\n                {\r\n                    valueOne: 'Lorem Ipsum',\r\n                },\r\n                {\r\n                    valueOne: 'Lorem Ipsum',\r\n                }\r\n            ]\r\n        },\r\n\r\n    ]\r\n\r\n    // HPI Data\r\n    const Prescolumns = [\r\n        {\r\n            key: 'RX',\r\n            label: 'RX',\r\n        },\r\n        {\r\n            key: 'Frequency',\r\n            label: 'Frequency'\r\n        },\r\n        {\r\n            key: 'Duration',\r\n            label: 'Duration',\r\n        },\r\n        // {\r\n        //     key: 'M | A | E | N',\r\n        //     label: 'M | A | E | N',\r\n        // },\r\n        {\r\n            key: 'Qty',\r\n            label: 'Qty / Taken',\r\n        }\r\n    ]\r\n\r\n    const Presitems = [\r\n        {\r\n            RX: 'Dolox Capsule / Tablet',\r\n            Frequency: '1/2 | 0 | 0 | 0',\r\n            Duration: '1 Day(s)',\r\n            Qty: '1 Tablet',\r\n            food: 'Before food'\r\n        },\r\n        {\r\n            RX: 'Dolox Capsule / Tablet',\r\n            Frequency: '1/2 | 0 | 0 | 0',\r\n            Duration: '1 Day(s)',\r\n            Qty: '1 Tablet',\r\n        },\r\n    ]\r\n\r\n    // HPI Data\r\n    const Documentcolumns = [\r\n        {\r\n            key: 'No.',\r\n            label: 'No',\r\n        },\r\n        {\r\n            key: 'Date',\r\n            label: 'Date'\r\n        },\r\n        {\r\n            key: 'LabTest',\r\n            label: 'Lab Test',\r\n        },\r\n        // {\r\n        //     key: 'M | A | E | N',\r\n        //     label: 'M | A | E | N',\r\n        // },\r\n        {\r\n            key: 'Notes',\r\n            label: 'Notes',\r\n        },\r\n        {\r\n            key: 'Link',\r\n            label: 'Link',\r\n        }\r\n    ]\r\n\r\n    const Documentitems = [\r\n        {\r\n            No: '1',\r\n            Date: '02-04-2024',\r\n            LabTest: 'Complete blood count',\r\n            Notes: '-',\r\n            Link: 'https://kartoffel.in/'\r\n        },\r\n        {\r\n            No: '2',\r\n            Date: '02-04-2024',\r\n            LabTest: 'Complete blood count',\r\n            Notes: '-',\r\n            Link: 'https://kartoffel.in/'\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <section className='patient-summary-sec'>\r\n            <div className='detailing-card'>\r\n                <PatientDetailCard />\r\n            </div>\r\n            <div className='tab-sec mt-4 mb-4'>\r\n                <CTabs activeItemKey={\"Vitals\"} onChange={(k) => setActiveKey(k)}>\r\n                    <CTabList variant=\"pills\">\r\n                        <CTab aria-controls=\"home-tab-pane\" itemKey={\"Vitals\"}>Vitals</CTab>\r\n                        <CTab aria-controls=\"profile-tab-pane\" itemKey={\"Health\"}>Health</CTab>\r\n                        <CTab aria-controls=\"contact-tab-pane\" itemKey={\"Prescription\"}>Prescription</CTab>\r\n                        <CTab aria-controls=\"contact-tab-pane\" itemKey={\"Glasses\"}>Glasses</CTab>\r\n                        <CTab aria-controls=\"contact-tab-pane\" itemKey={\"Examination\"}>Examination</CTab>\r\n                        <CTab aria-controls=\"contact-tab-pane\" itemKey={\"Histories\"}>Histories</CTab>\r\n                        <CTab aria-controls=\"contact-tab-pane\" itemKey={\"Documents\"}>Documents</CTab>\r\n                    </CTabList>\r\n                    <div className=\"bread-crumbs mt-4\">\r\n                        <p>\r\n                            <Link to=\"/patients\">Patients</Link> / <Link to=\"/patients/history\"> Patient History </Link> / <Link to=\"/patients/summary\" className=\"active\"> {ActiveKey}</Link>\r\n                        </p>\r\n                    </div>\r\n                    <CTabContent>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"home-tab-pane\" itemKey={\"Vitals\"}>\r\n                            <TableColor columns={VitalsColumns} items={VitalsItems} head={\"BMI\"} green={\"green\"} />\r\n                            <TableColor columns={TemColumns} items={TemItems} head={\"Temperature\"} green={\"green\"} />\r\n                        </CTabPanel>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"profile-tab-pane\" itemKey={\"Health\"}>\r\n                            <SummaryTable columns={Cheifcolumns} items={Cheifitems} head={\"Chief Complaints\"} />\r\n                            <SummaryTable columns={Medicinecolumns} items={Medicineitems} head={\"Medicine\"} />\r\n                            <SummaryTable columns={HPIcolumns} items={HPIitems} head={\"HPI\"} />\r\n                            <SummaryTable columns={Surgicalcolumns} items={Surgicalitems} head={\"Surgical Procedures\"} />\r\n                        </CTabPanel>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"contact-tab-pane\" itemKey={\"Prescription\"}>\r\n                            <TableSec PrescritionData={PrescritionData} />\r\n                            <Prescription columns={Prescolumns} items={Presitems} head={\"Prescription\"} />\r\n                            <TableSec PrescritionData={PrescritionData} />\r\n                            <Prescription columns={Prescolumns} items={Presitems} head={\"Prescription\"} />\r\n                        </CTabPanel>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={\"Glasses\"}>\r\n                            <TableRow PrescritionData={PrescritionData} />\r\n                            <SummaryTable columns={GlassColumns} items={GlassItems} />\r\n                            <TableRow PrescritionData={PrescritionDataTwo} />\r\n                            <SummaryTable columns={GlassColumns} items={GlassItems} />\r\n                        </CTabPanel>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={\"Examination\"}>\r\n                            <ExamCard ExaminationaData={ExaminationaData} />\r\n                        </CTabPanel>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={\"Histories\"}>\r\n                            <SummaryTable columns={HistoryColumns} items={HistoryItems} head={\"Medical History\"} />\r\n                        </CTabPanel>\r\n                        <CTabPanel className=\"p-3\" aria-labelledby=\"disabled-tab-pane\" itemKey={\"Documents\"}>\r\n                            <DocumentTable columns={Documentcolumns} items={Documentitems} head={\"LAB\"} />\r\n                            <DocumentTable columns={Documentcolumns} items={Documentitems} head={\"IMAGING\"} />\r\n                        </CTabPanel>\r\n                    </CTabContent>\r\n                </CTabs>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default PatientSummaryView\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import PropTypes from 'prop-types'\nimport React, { forwardRef, HTMLAttributes } from 'react'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableFootProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableFoot = forwardRef<HTMLTableSectionElement, CTableFootProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tfoot\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tfoot>\n    )\n  },\n)\n\nCTableFoot.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableFoot.displayName = 'CTableFoot'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const CTableCaption = forwardRef<\n  HTMLTableCaptionElement,\n  HTMLAttributes<HTMLTableCaptionElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <caption {...props} ref={ref}>\n      {children}\n    </caption>\n  )\n})\n\nCTableCaption.propTypes = {\n  children: PropTypes.node,\n}\n\nCTableCaption.displayName = 'CTableCaption'\n","import React, { FC, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\n\nexport interface CTableResponsiveWrapperProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n}\n\nexport const CTableResponsiveWrapper: FC<CTableResponsiveWrapperProps> = ({\n  children,\n  responsive,\n  ...rest\n}) => {\n  return responsive ? (\n    <div\n      className={\n        typeof responsive === 'boolean' ? 'table-responsive' : `table-responsive-${responsive}`\n      }\n      {...rest}\n    >\n      {children}\n    </div>\n  ) : (\n    <>{children}</>\n  )\n}\n\nCTableResponsiveWrapper.propTypes = {\n  children: PropTypes.node,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n}\n\nCTableResponsiveWrapper.displayName = 'CTableResponsiveWrapper'\n","import type { Column, Item } from './types'\n\nexport const pretifyName = (name: string) => {\n  return name\n    .replace(/[-_.]/g, ' ')\n    .replace(/ +/g, ' ')\n    .replace(/([a-z0-9])([A-Z])/g, '$1 $2')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ')\n}\n\nexport const getColumnLabel = (column: Column | string) =>\n  typeof column === 'object' ? column.label ?? pretifyName(column.key) : pretifyName(column)\n\nexport const getColumnNames = (columns: (string | Column)[] | undefined, items?: Item[]) =>\n  columns\n    ? columns.map((column: Column | string) => {\n        return typeof column === 'object' ? column.key : column\n      })\n    : items && getColumnNamesFromItems(items)\n\nexport const getColumnNamesFromItems = (items: Item[]) =>\n  Object.keys(items[0] || {}).filter((el) => el.charAt(0) !== '_')\n","import React, { forwardRef, TableHTMLAttributes, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CTableHead, CTableHeadProps } from './CTableHead'\nimport { CTableHeaderCell } from './CTableHeaderCell'\nimport { CTableBody } from './CTableBody'\nimport { CTableDataCell } from './CTableDataCell'\nimport { CTableRow } from './CTableRow'\nimport { CTableFoot, CTableFootProps } from './CTableFoot'\nimport { CTableCaption } from './CTableCaption'\nimport { CTableResponsiveWrapper } from './CTableResponsiveWrapper'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\nimport { getColumnLabel, getColumnNames } from './utils'\nimport type { Column, FooterItem, Item } from './types'\n\nexport interface CTableProps extends Omit<TableHTMLAttributes<HTMLTableElement>, 'align'> {\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * Sets the border color of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  borderColor?: Colors\n  /**\n   * Add borders on all sides of the table and cells.\n   */\n  bordered?: boolean\n  /**\n   * Remove borders on all sides of the table and cells.\n   */\n  borderless?: boolean\n  /**\n   * Put the caption on the top if you set `caption=\"top\"` of the table or set the text of the table caption.\n   */\n  caption?: 'top' | string\n  /**\n   * Set the text of the table caption and the caption on the top of the table.\n   *\n   * @since 4.3.0\n   */\n  captionTop?: string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Prop for table columns configuration. If prop is not defined, table will display columns based on the first item keys, omitting keys that begins with underscore (e.g. '_props')\n   *\n   * In columns prop each array item represents one column. Item might be specified in two ways:\n   * String: each item define column name equal to item value.\n   * Object: item is object with following keys available as column configuration:\n   * - key (required)(String) - define column name equal to item key.\n   * - label (String) - define visible label of column. If not defined, label will be generated automatically based on column name, by converting kebab-case and snake_case to individual words and capitalization of each word.\n   * - _props (Object) - adds classes to all cels in column, ex. `_props: { scope: 'col', className: 'custom-class' }`,\n   * - _style (Object) - adds styles to the column header (useful for defining widths)\n   *\n   * @since 4.3.0\n   */\n  columns?: (string | Column)[]\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * Array of objects or strings, where each element represents one cell in the table footer.\n   *\n   * Example items:\n   * `['FooterCell', 'FooterCell', 'FooterCell']`\n   * or\n   * `[{ label: 'FooterCell', _props: { color: 'success' }, ...]`\n   *\n   * @since 4.3.0\n   */\n  footer?: (FooterItem | string)[]\n  /**\n   * Enable a hover state on table rows within a `<CTableBody>`.\n   */\n  hover?: boolean\n  /**\n   * Array of objects, where each object represents one item - row in table. Additionally, you can add style classes to each row by passing them by '_props' key and to single cell by '_cellProps'.\n   *\n   * Example item:\n   * `{ name: 'John' , age: 12, _props: { color: 'success' }, _cellProps: { age: { className: 'fw-bold'}}}`\n   *\n   * @since 4.3.0\n   */\n  items?: Item[]\n  /**\n   * Make any table responsive across all viewports or pick a maximum breakpoint with which to have a responsive table up to.\n   */\n  responsive?: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl'\n  /**\n   * Make table more compact by cutting all cell `padding` in half.\n   */\n  small?: boolean\n  /**\n   * Add zebra-striping to any table row within the `<CTableBody>`.\n   */\n  striped?: boolean\n  /**\n   * Add zebra-striping to any table column.\n   *\n   * @since 4.3.0\n   */\n  stripedColumns?: boolean\n  /**\n   * Properties that will be passed to the table footer component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablefoot\n   * @since 4.3.0\n   */\n  tableFootProps?: CTableFootProps\n  /**\n   * Properties that will be passed to the table head component.\n   *\n   * @link https://coreui.io/react/docs/components/table/#ctablehead\n   * @since 4.3.0\n   */\n  tableHeadProps?: CTableHeadProps\n}\n\nexport const CTable = forwardRef<HTMLTableElement, CTableProps>(\n  (\n    {\n      children,\n      align,\n      borderColor,\n      bordered,\n      borderless,\n      caption,\n      captionTop,\n      className,\n      color,\n      columns,\n      footer,\n      hover,\n      items,\n      responsive,\n      small,\n      striped,\n      stripedColumns,\n      tableFootProps,\n      tableHeadProps,\n      ...rest\n    },\n    ref,\n  ) => {\n    const columnNames = useMemo(() => getColumnNames(columns, items), [columns, items])\n\n    return (\n      <CTableResponsiveWrapper responsive={responsive}>\n        <table\n          className={classNames(\n            'table',\n            {\n              [`align-${align}`]: align,\n              [`border-${borderColor}`]: borderColor,\n              [`caption-top`]: captionTop || caption === 'top',\n              'table-bordered': bordered,\n              'table-borderless': borderless,\n              [`table-${color}`]: color,\n              'table-hover': hover,\n              'table-sm': small,\n              'table-striped': striped,\n              'table-striped-columns': stripedColumns,\n            },\n            className,\n          )}\n          {...rest}\n          ref={ref}\n        >\n          {((caption && caption !== 'top') || captionTop) && (\n            <CTableCaption>{caption || captionTop}</CTableCaption>\n          )}\n          {columns && (\n            <CTableHead {...tableHeadProps}>\n              <CTableRow>\n                {columns.map((column: Column, index: number) => (\n                  <CTableHeaderCell\n                    {...(column._props && { ...column._props })}\n                    {...(column._style && { style: { ...column._style } })}\n                    key={index}\n                  >\n                    {getColumnLabel(column)}\n                  </CTableHeaderCell>\n                ))}\n              </CTableRow>\n            </CTableHead>\n          )}\n          {items && (\n            <CTableBody>\n              {items.map((item: Item, index: number) => (\n                <CTableRow {...(item._props && { ...item._props })} key={index}>\n                  {columnNames &&\n                    columnNames.map((colName: string, index: number) => {\n                      // eslint-disable-next-line unicorn/no-negated-condition\n                      return item[colName] !== undefined ? (\n                        <CTableDataCell\n                          {...(item._cellProps && {\n                            ...(item._cellProps['all'] && { ...item._cellProps['all'] }),\n                            ...(item._cellProps[colName] && { ...item._cellProps[colName] }),\n                          })}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ) : null\n                    })}\n                </CTableRow>\n              ))}\n            </CTableBody>\n          )}\n          {children}\n          {footer && (\n            <CTableFoot {...tableFootProps}>\n              <CTableRow>\n                {footer.map((item: FooterItem | string, index: number) => (\n                  <CTableDataCell\n                    {...(typeof item === 'object' && item._props && { ...item._props })}\n                    key={index}\n                  >\n                    {typeof item === 'object' ? item.label : item}\n                  </CTableDataCell>\n                ))}\n              </CTableRow>\n            </CTableFoot>\n          )}\n        </table>\n      </CTableResponsiveWrapper>\n    )\n  },\n)\n\nCTable.propTypes = {\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  borderColor: PropTypes.string,\n  bordered: PropTypes.bool,\n  borderless: PropTypes.bool,\n  caption: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf(['top'])]),\n  captionTop: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n  columns: PropTypes.array,\n  footer: PropTypes.array,\n  hover: PropTypes.bool,\n  items: PropTypes.array,\n  responsive: PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.oneOf<'sm' | 'md' | 'lg' | 'xl' | 'xxl'>(['sm', 'md', 'lg', 'xl', 'xxl']),\n  ]),\n  small: PropTypes.bool,\n  striped: PropTypes.bool,\n  stripedColumns: PropTypes.bool,\n  tableFootProps: PropTypes.shape({ ...CTableFoot.propTypes }),\n  tableHeadProps: PropTypes.shape({ ...CTableHead.propTypes }),\n}\n\nCTable.displayName = 'CTable'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableBodyProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableBody = forwardRef<HTMLTableSectionElement, CTableBodyProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <tbody\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tbody>\n    )\n  },\n)\n\nCTableBody.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableBody.displayName = 'CTableBody'\n","import React, { forwardRef, TdHTMLAttributes, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableDataCellProps\n  extends Omit<TdHTMLAttributes<HTMLTableCellElement>, 'align'>,\n    Omit<ThHTMLAttributes<HTMLTableCellElement>, 'align'> {\n  /**\n   * Highlight a table row or cell.\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n  /**\n   * @ignore\n   */\n  colSpan?: number\n}\n\nexport const CTableDataCell = forwardRef<HTMLTableCellElement, CTableDataCellProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    const Component = rest.scope ? 'th' : 'td'\n\n    return (\n      <Component\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </Component>\n    )\n  },\n)\n\nCTableDataCell.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableDataCell.displayName = 'CTableDataCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeadProps extends HTMLAttributes<HTMLTableSectionElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHead = forwardRef<HTMLTableSectionElement, CTableHeadProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <thead\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </thead>\n    )\n  },\n)\n\nCTableHead.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHead.displayName = 'CTableHead'\n","import React, { forwardRef, ThHTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableHeaderCellProps extends ThHTMLAttributes<HTMLTableCellElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableHeaderCell = forwardRef<HTMLTableCellElement, CTableHeaderCellProps>(\n  ({ children, className, color, ...rest }, ref) => {\n    return (\n      <th\n        className={\n          classNames(\n            {\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </th>\n    )\n  },\n)\n\nCTableHeaderCell.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableHeaderCell.displayName = 'CTableHeaderCell'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { colorPropType } from '../../props'\nimport type { Colors } from '../../types'\n\nexport interface CTableRowProps extends HTMLAttributes<HTMLTableRowElement> {\n  /**\n   * Highlight a table row or cell..\n   */\n  active?: boolean\n  /**\n   * Set the vertical aligment.\n   */\n  align?: 'bottom' | 'middle' | 'top' | string\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Sets the color context of the component to one of CoreUI’s themed colors.\n   *\n   * @type 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info' | 'dark' | 'light' | string\n   */\n  color?: Colors\n}\n\nexport const CTableRow = forwardRef<HTMLTableRowElement, CTableRowProps>(\n  ({ children, active, align, className, color, ...rest }, ref) => {\n    return (\n      <tr\n        className={\n          classNames(\n            {\n              [`align-${align}`]: align,\n              'table-active': active,\n              [`table-${color}`]: color,\n            },\n            className,\n          ) || undefined\n        }\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </tr>\n    )\n  },\n)\n\nCTableRow.propTypes = {\n  active: PropTypes.bool,\n  align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n  children: PropTypes.node,\n  className: PropTypes.string,\n  color: colorPropType,\n}\n\nCTableRow.displayName = 'CTableRow'\n","import PropTypes from 'prop-types'\n\nimport type { Placements, Triggers } from './types'\n\nexport const colorPropType = PropTypes.oneOfType([\n  PropTypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'warning',\n    'info',\n    'dark',\n    'light',\n  ]),\n  PropTypes.string,\n])\n\nexport const fallbackPlacementsPropType = PropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.oneOf<Placements>(['top', 'bottom', 'right', 'left']).isRequired),\n  PropTypes.oneOf<Placements>(['top', 'bottom', 'right', 'left']),\n])\n\nexport const placementPropType = PropTypes.oneOf<Placements>([\n  'auto',\n  'auto-start',\n  'auto-end',\n  'top-end',\n  'top',\n  'top-start',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'right-start',\n  'right',\n  'right-end',\n  'left-start',\n  'left',\n  'left-end',\n])\n\nexport const shapePropType = PropTypes.oneOfType([\n  PropTypes.oneOf([\n    'rounded',\n    'rounded-top',\n    'rounded-end',\n    'rounded-bottom',\n    'rounded-start',\n    'rounded-circle',\n    'rounded-pill',\n    'rounded-0',\n    'rounded-1',\n    'rounded-2',\n    'rounded-3',\n  ]),\n  PropTypes.string,\n])\n\nexport const textColorsPropType = PropTypes.oneOfType([\n  colorPropType,\n  PropTypes.oneOf(['white', 'muted']),\n  PropTypes.string,\n])\n\nexport const triggerPropType = PropTypes.oneOfType([\n  PropTypes.arrayOf(PropTypes.oneOf<Triggers>(['hover', 'focus', 'click']).isRequired),\n  PropTypes.oneOf<Triggers>(['hover', 'focus', 'click']),\n])\n"],"names":["_jsx","className","children","_jsxs","CRow","CCol","sm","lg","_ref","columns","items","green","head","concat","CTable","tableHeadProps","color","PrescritionData","id","eyesight","date","ExaminationaData","map","item","type","datas","content","valueOne","CTableHead","CTableRow","CTableHeaderCell","scope","key","CTableBody","index","col","colIndex","CTableDataCell","label","data","No","Date","LabTest","Notes","href","Link","target","rel","RX","Frequency","food","Duration","Qty","TabsContext","createContext","CTabs","forwardRef","_a","ref","activeItemKey","onChange","useId","_b","useState","_activeItemKey","setActiveItemKey","useEffect","React","Provider","value","classNames","propTypes","PropTypes","isRequired","displayName","CTabList","layout","variant","rest","__rest","tabListRef","useRef","forkedRef","useForkedRef","__assign","role","onKeyDown","event","current","preventDefault","Array","from","querySelectorAll","nextActiveElement","at","list","activeElement","shouldGetNext","isCycleAllowed","listLength","length","indexOf","Math","max","min","getNextActiveElement","focus","preventScroll","CTab","itemKey","useContext","isActive","active","onClick","onFocus","tabIndex","CTabContent","getTransitionDurationFromElement","element","window","getComputedStyle","transitionDuration","transitionDelay","floatTransitionDuration","Number","parseFloat","floatTransitionDelay","split","CTabPanel","onHide","onShow","transition","visible","_c","tabPaneRef","_d","_visible","setVisible","undefined","Transition","in","nodeRef","onEnter","onExit","timeout","state","fade","show","ActiveKey","setActiveKey","GlassColumns","GlassItems","SPH","CYL","Axis","Prescolumns","Presitems","Documentcolumns","Documentitems","PatientDetailCard","k","to","TableColor","Result","BMI","Height","Weight","_cellProps","class","Temperature","Type","SummaryTable","Complaints","MEDICINE","STRENGTH","INTAKEDAYS","QUANTITY","SIGINFO","START","END","Reason","Status","Onset","Location","Characteristics","aggravating","Relieving","Temporal","Severity","DATE","Procedure","TableSec","Prescription","TableRow","ExamCard","Condition","OnsetDate","RecoveredDate","TreatedBy","Treatment","Remark","DocumentTable","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","xs","md","xl","xxl","cols","gutter","gutterX","gutterY","CTableFoot","colorPropType","CTableCaption","props","CTableResponsiveWrapper","responsive","pretifyName","name","replace","word","charAt","toUpperCase","slice","join","getColumnNamesFromItems","Object","keys","filter","el","align","borderColor","bordered","borderless","caption","captionTop","footer","hover","small","striped","stripedColumns","tableFootProps","columnNames","useMemo","column","getColumnNames","_props","_style","style","getColumnLabel","colName","Component"],"sourceRoot":""}