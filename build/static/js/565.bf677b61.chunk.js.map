{"version":3,"file":"static/js/565.bf677b61.chunk.js","mappings":"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","sources":["Components/Breadcrumb/Breadcrumb.jsx","Components/Buttons/PrimaryButton/PrimaryButton.jsx","Components/PatientCard/PatientCard.jsx","Views/ExistingPatient/ExistingPatientView.jsx","../node_modules/@coreui/react/src/components/breadcrumb/CBreadcrumb.tsx","../node_modules/@coreui/react/src/components/breadcrumb/CBreadcrumbItem.tsx","../node_modules/@coreui/react/src/components/grid/CCol.tsx","../node_modules/@coreui/react/src/components/grid/CRow.tsx","../node_modules/@coreui/react/src/components/link/CLink.tsx"],"sourcesContent":["import { CBreadcrumb, CBreadcrumbItem } from \"@coreui/react\";\r\nimport React from \"react\";\r\nimport \"./Breadcrumb.css\";\r\n\r\nconst Breadcrumb = ({ paths }) => {\r\n  const lastIndex = paths.length - 1;\r\n  const url = \"/telegaruda-caregiver\";\r\n  return (\r\n    <>\r\n      <CBreadcrumb>\r\n        {paths.map((data, index) => (\r\n          <CBreadcrumbItem\r\n            href={url + data?.to}\r\n            className={`breadcrumb-item-custom ${\r\n              lastIndex === index && \"black\"\r\n            }`}\r\n          >\r\n            <span className=\"breadcrumb-label\">{data.label}</span>\r\n          </CBreadcrumbItem>\r\n        ))}\r\n      </CBreadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import React from \"react\";\r\nimport \"./PrimaryButton.css\";\r\n\r\nconst PrimaryButton = ({ children, onClick }) => {\r\n  return (\r\n    <button className=\"button\" onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PrimaryButton;\r\n","import React from \"react\";\r\nimport { Assets } from \"../../assets/Assets\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction PatientCard({ PatientDetail }) {\r\n  const navigate = useNavigate();\r\n\r\n  const goTo = () => {\r\n    navigate(\"/patients/history\");\r\n  };\r\n  return (\r\n    <div className=\"card-sec\">\r\n      <div className=\"row align-items-center\">\r\n        <div className=\"profile col-4\">\r\n          <img src={PatientDetail.profile} alt=\"Patient-image\" />\r\n        </div>\r\n        <div className=\"patient-details col-8\">\r\n          <h5>{PatientDetail.name}</h5>\r\n          <p className=\"flex-sec-wrap gap-sec\">\r\n            <small className=\"fs-10 fw-500\">{PatientDetail.email}</small>\r\n            <small className=\"fs-10 fw-500\">|</small>\r\n            <small className=\"fs-10 fw-500\">{PatientDetail.mobile}</small>\r\n          </p>\r\n          <p className=\"flex-sec-wrap gap-sec\">\r\n            <small className=\"fs-10 fw-600\">MRN: {PatientDetail.mrn}</small>\r\n            <small className=\"fs-10 fw-600\">|</small>\r\n            <small className=\"fs-10 fw-600\">{PatientDetail.age}</small>\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <img\r\n        src={Assets.Edit}\r\n        className=\"edit-icon cursor\"\r\n        alt=\"edit-icon\"\r\n        onClick={goTo}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PatientCard;\r\n","import React, { useState } from \"react\";\r\nimport Breadcrumb from \"../../Components/Breadcrumb/Breadcrumb\";\r\nimport PatientCard from \"../../Components/PatientCard/PatientCard\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Assets } from \"../../assets/Assets\";\r\nimport { CCol, CContainer, CModal, CModalBody, CRow } from \"@coreui/react\";\r\nimport PrimaryButton from \"../../Components/Buttons/PrimaryButton/PrimaryButton\";\r\nimport SecondaryButton from \"../../Components/Buttons/SecondaryButton/SecondaryButton\";\r\n\r\nfunction ExistingPatientView() {\r\n  const navigate = useNavigate();\r\n  const [visible, setVisible] = useState(false);\r\n  const PatientDetail = [\r\n    {\r\n      name: \"Ram Mohan S R\",\r\n      email: \"rammohan@cure.com\",\r\n      mobile: \"+91 98765 43210\",\r\n      mrn: \"MRN 3\",\r\n      age: \"34 yrs (M)\",\r\n      profile: Assets.Patient,\r\n    },\r\n    {\r\n      name: \"Ram Mohan S R\",\r\n      email: \"rammohan@cure.com\",\r\n      mobile: \"+91 98765 43210\",\r\n      mrn: \"MRN 3\",\r\n      age: \"34 yrs (M)\",\r\n      profile: Assets.Patient,\r\n    },\r\n    {\r\n      name: \"Ram Mohan S R\",\r\n      email: \"rammohan@cure.com\",\r\n      mobile: \"+91 98765 43210\",\r\n      mrn: \"MRN 3\",\r\n      age: \"34 yrs (M)\",\r\n      profile: Assets.Patient,\r\n    },\r\n    {\r\n      name: \"Ram Mohan S R\",\r\n      email: \"rammohan@cure.com\",\r\n      mobile: \"+91 98765 43210\",\r\n      mrn: \"MRN 3\",\r\n      age: \"34 yrs (M)\",\r\n      profile: Assets.Patient,\r\n    },\r\n  ];\r\n\r\n  const DetailSec = () => {\r\n    localStorage.removeItem(\"patiendDetailTab\");\r\n    navigate(\"/patients/history\");\r\n  };\r\n\r\n  const addPatient = () => {\r\n    console.log(\"first\");\r\n    setVisible(!visible);\r\n  };\r\n\r\n  const addPatientModalClose = () => {\r\n    setVisible(false);\r\n  };\r\n\r\n  return (\r\n    <section className=\"existing-patient\">\r\n      <div className=\"flex-sec top-sec\">\r\n        <div className=\"bread-crumbs\">\r\n          <p>\r\n            <Link to=\"/patients\">Patient</Link> /{\" \"}\r\n            <Link to=\"/patients\" className=\"active\">\r\n              Existing Patient\r\n            </Link>\r\n          </p>\r\n        </div>\r\n        {/* onClick={addPatient} */}\r\n        <div className=\"patient-adding\">\r\n          <button>+ ADD Patient</button>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        {PatientDetail.map((data, i) => (\r\n          <div className=\"col-4\" onClick={() => DetailSec()}>\r\n            <Link\r\n              //   to={\"/patients/history\"}\r\n              className=\"card-link\"\r\n            >\r\n              <PatientCard PatientDetail={data} />\r\n            </Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <CModal\r\n        alignment=\"center\"\r\n        visible={visible}\r\n        onClose={addPatientModalClose}\r\n        aria-labelledby=\"VerticallyCenteredExample\"\r\n        size=\"xl\"\r\n      >\r\n        <CModalBody className=\"pad-custom\">\r\n          <CContainer>\r\n            <div className=\"mb-2\">\r\n              <span className=\"fs-20 fw-600\">New Patient</span>\r\n            </div>\r\n            <CRow className=\"g-3 mb-2\">\r\n              <CCol lg={5} className=\"mb-2\"></CCol>\r\n              <CCol lg={7} className=\"mb-2\">\r\n                <CRow className=\"g-3\">\r\n                  <CCol lg={6}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <div class=\"position-relative\">\r\n                        <label for=\"validationTooltip01\" class=\"form-label\">\r\n                          First Name *\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          class=\"form-control pad-10\"\r\n                          id=\"validationTooltip01\"\r\n                          placeholder=\"Enter\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                  <CCol lg={6}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <div class=\"position-relative\">\r\n                        <label for=\"validationTooltip01\" class=\"form-label\">\r\n                          Last Name *\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          class=\"form-control pad-10\"\r\n                          id=\"validationTooltip01\"\r\n                          placeholder=\"Enter\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                  <CCol lg={6}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <div class=\"position-relative\">\r\n                        <label for=\"validationTooltip01\" class=\"form-label\">\r\n                          Age *\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          class=\"form-control pad-10\"\r\n                          id=\"validationTooltip01\"\r\n                          placeholder=\"Enter\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                  <CCol lg={6}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <div class=\"position-relative\">\r\n                        <label for=\"validationTooltip01\" class=\"form-label\">\r\n                          Gender *\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                  <CCol lg={6}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <div class=\"position-relative\">\r\n                        <label for=\"validationTooltip01\" class=\"form-label\">\r\n                          Mobile Number *\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          class=\"form-control pad-10\"\r\n                          id=\"validationTooltip01\"\r\n                          placeholder=\"Enter\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                  <CCol lg={6}>\r\n                    <div style={{ width: \"100%\" }}>\r\n                      <div class=\"position-relative\">\r\n                        <label for=\"validationTooltip01\" class=\"form-label\">\r\n                          MRN Number/Patient Id\r\n                        </label>\r\n                        <input\r\n                          type=\"text\"\r\n                          class=\"form-control pad-10\"\r\n                          id=\"validationTooltip01\"\r\n                          placeholder=\"Enter\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  </CCol>\r\n                </CRow>\r\n              </CCol>\r\n            </CRow>\r\n            <CRow className=\"mb-1\">\r\n              <div style={{ width: \"128px\" }}>\r\n                <PrimaryButton>CREATE</PrimaryButton>\r\n              </div>\r\n              <div style={{ width: \"128px\" }}>\r\n                <SecondaryButton onClick={addPatientModalClose}>\r\n                  CANCEL\r\n                </SecondaryButton>\r\n              </div>\r\n            </CRow>\r\n          </CContainer>\r\n        </CModalBody>\r\n      </CModal>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ExistingPatientView;\r\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport interface CBreadcrumbProps extends HTMLAttributes<HTMLOListElement> {\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n}\n\nexport const CBreadcrumb = forwardRef<HTMLOListElement, CBreadcrumbProps>(\n  ({ children, className, ...rest }, ref) => {\n    return (\n      <nav aria-label=\"breadcrumb\">\n        <ol className={classNames('breadcrumb', className)} {...rest} ref={ref}>\n          {children}\n        </ol>\n      </nav>\n    )\n  },\n)\n\nCBreadcrumb.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n}\n\nCBreadcrumb.displayName = 'CBreadcrumb'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { CLink } from '../link/CLink'\n\nexport interface CBreadcrumbItemProps extends HTMLAttributes<HTMLLIElement> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The `href` attribute for the inner `<CLink>` component.\n   */\n  href?: string\n}\n\nexport const CBreadcrumbItem = forwardRef<HTMLLIElement, CBreadcrumbItemProps>(\n  ({ children, active, className, href, ...rest }, ref) => {\n    return (\n      <li\n        className={classNames(\n          'breadcrumb-item',\n          {\n            active: active,\n          },\n          className,\n        )}\n        {...(active && { 'aria-current': 'page' })}\n        {...rest}\n        ref={ref}\n      >\n        {href ? <CLink href={href}>{children}</CLink> : children}\n      </li>\n    )\n  },\n)\n\nCBreadcrumbItem.propTypes = {\n  active: PropTypes.bool,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  href: PropTypes.string,\n}\n\nCBreadcrumbItem.displayName = 'CBreadcrumbItem'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\ntype Span = 'auto' | number | string | boolean | null\n\ntype BPObject = {\n  span?: Span\n  offset?: number | string | null\n  order?: 'first' | 'last' | number | string | null\n}\n\ntype Col = Span | BPObject\n\nexport interface CColProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xs?: Col\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  sm?: Col\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  md?: Col\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  lg?: Col\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xl?: Col\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type { 'auto' | number | string | boolean | { span: 'auto' | number | string | boolean } | { offset: number | string } | { order: 'first' | 'last' | number | string }}\n   */\n  xxl?: Col\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CCol = forwardRef<HTMLDivElement, CColProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n        repsonsiveClassNames.push(`col${infix}-${breakpoint}`)\n      }\n\n      if (typeof breakpoint === 'boolean') {\n        repsonsiveClassNames.push(`col${infix}`)\n      }\n\n      if (breakpoint && typeof breakpoint === 'object') {\n        if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n          repsonsiveClassNames.push(`col${infix}-${breakpoint.span}`)\n        }\n\n        if (typeof breakpoint.span === 'boolean') {\n          repsonsiveClassNames.push(`col${infix}`)\n        }\n\n        if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n          repsonsiveClassNames.push(`order${infix}-${breakpoint.order}`)\n        }\n\n        if (typeof breakpoint.offset === 'number') {\n          repsonsiveClassNames.push(`offset${infix}-${breakpoint.offset}`)\n        }\n      }\n    })\n\n    return (\n      <div\n        className={classNames(\n          repsonsiveClassNames.length > 0 ? repsonsiveClassNames : 'col',\n          className,\n        )}\n        {...rest}\n        ref={ref}\n      >\n        {children}\n      </div>\n    )\n  },\n)\n\nconst span = PropTypes.oneOfType([\n  PropTypes.bool,\n  PropTypes.number,\n  PropTypes.string,\n  PropTypes.oneOf(['auto']),\n])\n\nconst col = PropTypes.oneOfType([\n  span,\n  PropTypes.shape({\n    span: span,\n    offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    order: PropTypes.oneOfType([\n      PropTypes.oneOf(['first', 'last']),\n      PropTypes.number,\n      PropTypes.string,\n    ]),\n  }),\n])\n\nCCol.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: col,\n  sm: col,\n  md: col,\n  lg: col,\n  xl: col,\n  xxl: col,\n}\n\nCCol.displayName = 'CCol'\n","import React, { forwardRef, HTMLAttributes } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nexport type BPObject = {\n  cols?: 'auto' | number | string | null\n  gutter?: number | string | null\n  gutterX?: number | string | null\n  gutterY?: number | string | null\n}\n\nexport interface CRowProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * The number of columns/offset/order on extra small devices (<576px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xs?: BPObject\n  /**\n   * The number of columns/offset/order on small devices (<768px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  sm?: BPObject\n  /**\n   * The number of columns/offset/order on medium devices (<992px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  md?: BPObject\n  /**\n   * The number of columns/offset/order on large devices (<1200px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  lg?: BPObject\n  /**\n   * The number of columns/offset/order on X-Large devices (<1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xl?: BPObject\n  /**\n   * The number of columns/offset/order on XX-Large devices (≥1400px).\n   *\n   * @type {{ cols: 'auto' | number | string } | { gutter: number | string } | { gutterX: number | string } | { gutterY: number | string }}\n   */\n  xxl?: BPObject\n}\n\nconst BREAKPOINTS = [\n  'xxl' as const,\n  'xl' as const,\n  'lg' as const,\n  'md' as const,\n  'sm' as const,\n  'xs' as const,\n]\n\nexport const CRow = forwardRef<HTMLDivElement, CRowProps>(\n  ({ children, className, ...rest }, ref) => {\n    const repsonsiveClassNames: string[] = []\n\n    BREAKPOINTS.forEach((bp) => {\n      const breakpoint = rest[bp]\n      delete rest[bp]\n\n      const infix = bp === 'xs' ? '' : `-${bp}`\n\n      if (typeof breakpoint === 'object') {\n        if (breakpoint.cols) {\n          repsonsiveClassNames.push(`row-cols${infix}-${breakpoint.cols}`)\n        }\n\n        if (typeof breakpoint.gutter === 'number') {\n          repsonsiveClassNames.push(`g${infix}-${breakpoint.gutter}`)\n        }\n\n        if (typeof breakpoint.gutterX === 'number') {\n          repsonsiveClassNames.push(`gx${infix}-${breakpoint.gutterX}`)\n        }\n\n        if (typeof breakpoint.gutterY === 'number') {\n          repsonsiveClassNames.push(`gy${infix}-${breakpoint.gutterY}`)\n        }\n      }\n    })\n\n    return (\n      <div className={classNames('row', repsonsiveClassNames, className)} ref={ref}>\n        {children}\n      </div>\n    )\n  },\n)\n\nconst bp = PropTypes.shape({\n  cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n  gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n})\n\nCRow.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  xs: bp,\n  sm: bp,\n  md: bp,\n  lg: bp,\n  xl: bp,\n  xxl: bp,\n}\n\nCRow.displayName = 'CRow'\n","import React, { AllHTMLAttributes, ElementType, forwardRef, MouseEvent } from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport { PolymorphicRefForwardingComponent } from '../../helpers'\n\nexport interface CLinkProps\n  extends Omit<AllHTMLAttributes<HTMLButtonElement | HTMLAnchorElement>, 'as'> {\n  /**\n   * Toggle the active state for the component.\n   */\n  active?: boolean\n  /**\n   * Component used for the root node. Either a string to use a HTML element or a component.\n   */\n  as?: ElementType\n  /**\n   * A string of all className you want applied to the component.\n   */\n  className?: string\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * The href attribute specifies the URL of the page the link goes to.\n   */\n  href?: string\n}\n\nexport const CLink: PolymorphicRefForwardingComponent<'a', CLinkProps> = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  CLinkProps\n>(({ children, active, as: Component = 'a', className, disabled, ...rest }, ref) => {\n  return (\n    <Component\n      // TODO: remove duplicated classes ex. `active active` in `<CListGroupItem>`\n      className={classNames(className, { active, disabled })}\n      {...(active && { 'aria-current': 'page' })}\n      {...(Component === 'a' && disabled && { 'aria-disabled': true, tabIndex: -1 })}\n      {...((Component === 'a' || Component === 'button') && {\n        onClick: (event: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => {\n          event.preventDefault\n          !disabled && rest.onClick && rest.onClick(event)\n        },\n      })}\n      disabled={disabled}\n      {...rest}\n      ref={ref}\n    >\n      {children}\n    </Component>\n  )\n})\n\nCLink.propTypes = {\n  active: PropTypes.bool,\n  as: PropTypes.elementType,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  disabled: PropTypes.bool,\n}\n\nCLink.displayName = 'CLink'\n"],"names":["_ref","paths","lastIndex","length","_jsx","_Fragment","children","CBreadcrumb","map","data","index","CBreadcrumbItem","href","to","className","concat","label","onClick","PatientDetail","navigate","useNavigate","_jsxs","src","profile","alt","name","email","mobile","mrn","age","Assets","Edit","goTo","visible","setVisible","useState","Patient","addPatientModalClose","Link","i","localStorage","removeItem","PatientCard","CModal","alignment","onClose","size","CModalBody","CContainer","CRow","CCol","lg","style","width","class","for","type","id","placeholder","PrimaryButton","SecondaryButton","forwardRef","_a","ref","rest","__rest","React","__assign","classNames","propTypes","PropTypes","displayName","active","CLink","BREAKPOINTS","repsonsiveClassNames","forEach","bp","breakpoint","infix","push","span","order","offset","col","xs","sm","md","xl","xxl","cols","gutter","gutterX","gutterY","_b","as","Component","disabled","tabIndex","event","preventDefault"],"sourceRoot":""}